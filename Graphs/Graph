#include <bits/stdc++.h>
using namespace std;
struct Graph{
    int vertex, edges;
    vector<vector<int>> graph;
    void build(int n,int m){
        vertex = n;
        edges = m;
        graph = vector<vector<int>>(n);
    }
    void entrar(int u,int v){
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    void imprimir(){
        cout<<"Conexoes do grafo:\n";
        for(int i=0;i<vertex;i++){
            cout<<i+1<<" : ";
            for(auto j : graph[i]){
                cout<<j+1<<" ";
            }
            cout<<endl;
        }
    }
    void somatorio_vertices(){
        cout<<"Graus do vertice do grafo:\n";
        for(int i=0;i<vertex;i++){
            cout<<"Grau ("<<i+1<<") : "<<graph[i].size()<<endl;
        }
    } 
    string invariantes_iso(Graph graph2){
        int vertex1 = graph.size();
        int vertex2 = graph2.graph.size();
        if(vertex1 != vertex2)
            return "Nao sao isomorfos\n";
        for(int i=0;i<vertex1;i++){
            if(graph[i].size() != graph2.graph[i].size())
                return "Nao sao isomorfos\n";
        }
        return "Nao e possivel responder\n";
    }
};
int main()
{
    Graph graph;
    int vertex,edge;
    cin>>vertex>>edge;
    graph.build(vertex, edge);
    for(int j=0;j<edge;j++){
        int u,v;
        cin>>u>>v;
        graph.entrar(u, v);
    }
    graph.imprimir();
    graph.somatorio_vertices();
    Graph graph2;
    cin>>vertex>>edge;
    graph2.build(vertex, edge);
    for(int j=0;j<edge;j++){
        int u,v;
        cin>>u>>v;
        graph2.entrar(u, v);
    }
    cout<<graph.invariantes_iso(graph2);
}
