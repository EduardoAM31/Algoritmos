#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
        int key;
        int d;
        Node* left;
        Node* right;
        int fb;
    public:
        static Node* montanode(int k,int T){
            Node *p = new Node;
            if(p){
                p->key = k;
                p->d = T;
                p->left = nullptr;
                p->right = nullptr;
                p->fb = 0;
            }
            return p;
        }
        static void desmontanode(Node *p){
            delete p;
        }
};
class AVLtree{
    private:
        Node* Root;
        void AVLprintPos(Node *r){
            if(r){
                AVLprintPos(r->left);
                AVLprintPos(r->right);
                cout<<" "<<r->key;
            }
        }
        void AVLprintPre(Node *r){
            if(r){
                cout<<" "<<r->key;
                AVLprintPre(r->left);
                AVLprintPre(r->right);
            }
        }
        void AVLprintInf(Node *r){
            if(r){
                AVLprintInf(r->left);
                cout<<" "<<r->key;
                AVLprintInf(r->right);
            }
        }
        void AVLprintNivel(Node *r, int niveltotal){
            queue<Node*> q;
			q.push(r);
			int ultimo=1;
			int nivelatual = 0;
			niveltotal++;
			while(!q.empty()){
				if(ultimo == (1<<nivelatual)){
					for(int i=1;i<=(1<<niveltotal)-2;i++)cout<<" ";
					nivelatual++;
					niveltotal--;
				}
				if(q.front()->d==-1)cout<<" ";
				else cout<<q.front()->key;
				if(!(q.front()->left)){
					if(q.front()->d != -1){
						Node *p;
						p->d=-1;
						p->left=nullptr;
						p->right=nullptr;
						q.push(p);
					}
				}else q.push(q.front()->left);
				if(!(q.front()->right)){
					if(q.front()->d != -1){
						Node *p;
						p->d=-1;
						p->left=nullptr;
						p->right=nullptr;
						q.push(p);
					}
				}else q.push(q.front()->right);
                if(q.front()->d==-1 && niveltotal){
                    Node *p;
                    p->d=-1;
                    p->left=nullptr;
                    p->right=nullptr;
                    q.push(p);
                    q.push(p);
                }
				q.pop();
				ultimo++;
				if(ultimo == (1<<nivelatual))cout<<endl;
				else {
                    for(int i=1;i<=(1<<(niveltotal+2))-1;i++)cout<<" ";
                }
			}
        }
        static Node* Min(Node *r){
            if(!r->left)
                return r;
            return Min(r->left);
        }
		static void AVL_RSE(Node **r){
            Node*a=*r;
            Node*b=a->right;
            a->right=b->left;
            b->left=a;
            if(b->fb==0){
                a->fb=1;
                b->fb=-1;
            }
            else a->fb=b->fb=0;
            *r=b;
        }
        static void AVL_RSD(Node **r){
            Node*a=*r;
            Node*b=a->left;
            a->left=b->right;
            b->right=a;
            if(b->fb==0){
                b->fb=1;
                a->fb=-1;
            }else a->fb=b->fb=0;
            *r=b;
        }
        static void AVL_RDE(Node **r){
            Node*a=*r;
            Node*b=a->right;
            Node*c=b->left;
            a->right=c->left;
            b->left=c->right;
            c->left=a;
            c->right=b;
            if(c->fb==-1){
                a->fb=0;
                b->fb=1;
            }else{
                if(c->fb==1){
                    a->fb=-1;
                    b->fb=0;
                }
                else a->fb=b->fb=0;
            }
            c->fb=0;
            *r=c;
        }
        static void AVL_RDD(Node **r){
            Node*a=*r;
            Node*b=a->left;
            Node*c=b->right;
            a->left=c->right;
            b->right=c->left;
            c->right=a;
            c->left=b;
            if(c->fb==-1){
                a->fb=1;
                b->fb=0;
            }else{
                if(c->fb==1){
                    a->fb=0;
                    b->fb=-1;
                }
                else a->fb=b->fb=0;
            }
            c->fb=0;
            *r=c;
        }
		int get_Altura(Node *r){
			if(!r)return 0;
			return max(get_Altura(r->left),get_Altura(r->right))+1;
		}
        static bool AVLinsert(Node **r, int k,Node *p){
            if(!(*r)){
                *r = p;
                p->fb = 0;
                return true;
            }
            if(k < (*r) -> key){
                if(AVLinsert(&(*r)->left, k, p)){
                    if((*r)->fb==0){
                        (*r)->fb=-1;
                        return true;
                    }
                    if((*r)->fb==1){
                        (*r)->fb=0;
                        return false;
                    }
                    if(((*r)->left)->fb==-1){
                        AVL_RSD(r);
                        return false;
                    }
                    AVL_RDD(r);
                    return false;
                }
                return false;
            }
            if(k > (*r) -> key){
                if(AVLinsert(&(*r)->right, k, p)){
                    if((*r)->fb==0){
                        (*r)->fb=1;
                        return true;
                    }
                    if((*r)->fb==-1){
                        (*r)->fb=0;
                        return false;
                    }
                    if(((*r)->right)->fb==+1){
                        AVL_RSE(r);
                        return false;
                    }
                    AVL_RDE(r);
                    return false;
                }
                return false;
            }
        }
        bool Erase(int k, Node **r){
            if(!(*r))
                return false;
            if(k==(*r)->key){
                if(!(*r)->left){
                    Node*p=(*r);
                    *r=(*r)->right;
                    delete p;
                    return true;
                }
                if(!(*r)->right){
                    Node*p=(*r);
                    *r=(*r)->left;
                    delete p;
                    return true;
                }
                Node*p=Min((*r)->right);
                swap((*r)->key, p->key);
                swap((*r)->d, p->d);
                if(Erase(k, &((*r)->right))){
                    if((*r)->fb == 1){
                        (*r)->fb = 0;
                        return true;
                    }
                    if((*r)->fb == 0){
                        (*r)->fb = -1;
                        return false;
                    }
                    if((*r)->left->fb==-1){
                       AVL_RSD(r); 
                       return true;
                    }
                    if((*r)->left->fb==0){
                       AVL_RSD(r); 
                       return false;
                    }
                    AVL_RDD(r);
                    return true;
                }
                return false;
            }
            if(k<(*r)->key){
                if(Erase(k, &((*r)->left))){
                    if((*r)->fb == -1){
                        (*r)->fb = 0;
                        return true;
                    }
                    if((*r)->fb == 0){
                        (*r)->fb = 1;
                        return false;
                    }
                    if((*r)->right->fb==1){
                       AVL_RSE(r); 
                       return true;
                    }
                    if((*r)->right->fb==0){
                       AVL_RSE(r); 
                       return false;
                    }
                    AVL_RDE(r);
                    return true;
                }
                return false;
            }
            if(Erase(k, &((*r)->right))){
                if((*r)->fb == 1){
                    (*r)->fb = 0;
                    return true;
                }
                if((*r)->fb == 0){
                    (*r)->fb = -1;
                    return false;
                }
                if((*r)->left->fb==-1){
                    AVL_RSD(r); 
                    return true;
                }
                if((*r)->left->fb==0){
                    AVL_RSD(r); 
                    return false;
                }
                AVL_RDD(r);
                return true;
            }
            return false;
        }
    public:
        AVLtree(){
           Root = nullptr;
        }
        void insert(int k,int d){
            Node *p = Node::montanode(k,d);
            if(p)AVLinsert(&Root, k, p);
        }
        void erase(int k){
            Erase(k, &Root);
        }
        int AVLfind(int k){
            Node * r = Root;
            while(r and k!=r->key){
                if(k<r->key)r=r->left;
                else r=r->right;
            }
            if(r){
                return r->d;
            }
            return r->d;
        }
        void InOrder(){
            Node * r = Root;
            AVLprintInf(r);
        }
        void PosOrder(){
            Node * r = Root;
            AVLprintPos(r);
        }
        void PreOrder(){
            Node * r = Root;
            AVLprintPre(r);
        }
        void Nivel(){
            Node * r = Root;
			int h = get_Altura(r);
            AVLprintNivel(r, h);
        }
};
signed main()
{
    int n;
    cin>>n;
    AVLtree arv;
    while(n--){
        int x;cin>>x;
        arv.insert(x,x);
    }
    cout<<"Pre.:";
    arv.PreOrder();
    cout<<"\nIn..:";
    arv.InOrder();
    cout<<"\nPost:";
    arv.PosOrder();
    cout<<"\nNivel:";
    cout<<endl<<endl;
    arv.Nivel();
    cout<<endl;
}
